name: Android CI
run-name: Android CI — ${{ github.ref_name }} @ ${{ github.sha }}

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [ "V13-dev", "master", "main" ]
  pull_request:
    branches: [ "V13-dev", "master", "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare Android env (writable keystore dir)
        shell: bash
        run: |
          export ANDROID_SDK_HOME="$HOME"
          export ANDROID_PREFS_ROOT="$HOME"
          mkdir -p "$HOME/.android"
          touch "$HOME/.android/debug.keystore" || true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Accept Android SDK licenses
        shell: bash
        run: |
          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          yes | "${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" --licenses || true

      - name: Build Debug APK
        run: ./gradlew :app:assembleDebug --stacktrace

      # Human-friendly summary in the job output
      - name: Summarize build result
        if: always()
        env:
          JOB_STATUS: ${{ job.status }}
        run: |
          if [ "$JOB_STATUS" = "success" ]; then
            echo "✅ Android CI passed (assembleDebug)" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ Android CI failed — check logs above" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "Run: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" >> "$GITHUB_STEP_SUMMARY"

      # Sticky PR comment with PASS/FAIL
      - name: Comment status on PR
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = `${{ job.status }}`;
            const url = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const body = status === 'success'
              ? `<!-- android-ci-status --> ✅ **Android CI** passed (assembleDebug). [View run](${url})`
              : `<!-- android-ci-status --> ❌ **Android CI** failed. [View run for errors](${url})`;
            const {owner, repo} = context.repo;
            const issue_number = context.payload.pull_request.number;
            const {data: comments} = await github.rest.issues.listComments({owner, repo, issue_number});
            const existing = comments.find(c => c.body && c.body.includes('<!-- android-ci-status -->'));
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number, body});
            }
