From 1a2b3c4d5e6f7890abcdef1234567890abcdef12 Mon Sep 17 00:00:00 2001
From: ChatGPT <devnull@example.com>
Date: Tue, 28 Oct 2025 01:45:00 +0000
Subject: [PATCH] Persist dark mode with DataStore and wire MainActivity to
 observe/apply setting

---
 app/build.gradle.kts                              | 12 ++++++++++++
 .../java/com/example/leo/MainActivity.kt          | 20 +++++++++++++++-----
 .../java/com/example/leo/data/ThemePrefs.kt       | 33 +++++++++++++++++++++++++++++++
 3 files changed, 60 insertions(+), 5 deletions(-)
 create mode 100644 app/src/main/java/com/example/leo/data/ThemePrefs.kt

diff --git a/app/build.gradle.kts b/app/build.gradle.kts
index 0000000..0000001 100644
--- a/app/build.gradle.kts
+++ b/app/build.gradle.kts
@@ -1,6 +1,18 @@
 // (partial) app/build.gradle.kts - add DataStore dependency if missing
+
 dependencies {
+    // Jetpack DataStore (Preferences) for theme persistence
+    implementation("androidx.datastore:datastore-preferences:1.1.1")
 }
 
diff --git a/app/src/main/java/com/example/leo/MainActivity.kt b/app/src/main/java/com/example/leo/MainActivity.kt
index 1111111..2222222 100644
--- a/app/src/main/java/com/example/leo/MainActivity.kt
+++ b/app/src/main/java/com/example/leo/MainActivity.kt
@@ -1,18 +1,28 @@
 package com.example.leo
 
 import android.os.Bundle
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
+import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.saveable.rememberSaveable
-import androidx.compose.runtime.setValue
 import androidx.navigation.compose.NavHost
 import androidx.navigation.compose.composable
 import androidx.navigation.compose.rememberNavController
 import com.example.leo.ui.chat.ChatScreen
 import com.example.leo.ui.settings.SettingsScreen
 import com.example.leo.ui.theme.LeoTheme
+import com.example.leo.data.ThemePrefs
 
 class MainActivity : ComponentActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
 
-        setContent {
+        val prefs = ThemePrefs(applicationContext)
+
+        setContent {
             val nav = rememberNavController()
-            var isDark by rememberSaveable { mutableStateOf(false) }
+
+            // Observe persisted dark mode preference (defaults to false)
+            val isDark by prefs.darkModeFlow.collectAsState(initial = false)
 
             // âœ… use your existing LeoTheme
             LeoTheme(darkTheme = isDark) {
                 NavHost(
                     navController = nav,
                     startDestination = "chat"
                 ) {
                     composable("chat") {
                         ChatScreen(
                             onOpenSettings = { nav.navigate("settings") }
                         )
                     }
                     composable("settings") {
                         SettingsScreen(
-                            isDark = isDark,
-                            onToggleDark = { isDark = it }
+                            isDark = isDark,
+                            onToggleDark = { enabled ->
+                                // Persist choice
+                                prefs.setDarkMode(enabled)
+                            }
                         )
                     }
                 }
             }
         }
     }
 }
diff --git a/app/src/main/java/com/example/leo/data/ThemePrefs.kt b/app/src/main/java/com/example/leo/data/ThemePrefs.kt
new file mode 100644
index 0000000..3333333
--- /dev/null
+++ b/app/src/main/java/com/example/leo/data/ThemePrefs.kt
@@ -0,0 +1,33 @@
+package com.example.leo.data
+
+import android.content.Context
+import androidx.datastore.preferences.core.booleanPreferencesKey
+import androidx.datastore.preferences.core.edit
+import androidx.datastore.preferences.core.emptyPreferences
+import androidx.datastore.preferences.preferencesDataStore
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.catch
+import kotlinx.coroutines.flow.map
+import kotlinx.coroutines.launch
+import java.io.IOException
+
+private const val STORE_NAME = "app_prefs"
+private val KEY_DARK = booleanPreferencesKey("dark_mode")
+
+private val Context.dataStore by preferencesDataStore(name = STORE_NAME)
+
+class ThemePrefs(private val ctx: Context) {
+    val darkModeFlow: Flow<Boolean> = ctx.dataStore.data
+        .catch { e -> if (e is IOException) emit(emptyPreferences()) else throw e }
+        .map { it[KEY_DARK] ?: false }
+
+    fun setDarkMode(enabled: Boolean) {
+        CoroutineScope(Dispatchers.IO).launch {
+            ctx.dataStore.edit { prefs ->
+                prefs[KEY_DARK] = enabled
+            }
+        }
+    }
+}
-- 
2.39.3
